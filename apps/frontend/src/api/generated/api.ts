/* tslint:disable */
/* eslint-disable */
/**
 * Wordle API
 * API documentation for the Wordle game
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface GameGameIdGet200Response
 */
export interface GameGameIdGet200Response {
    /**
     * The unique ID of the game.
     * @type {string}
     * @memberof GameGameIdGet200Response
     */
    'gameId'?: string;
    /**
     * The username of the player.
     * @type {string}
     * @memberof GameGameIdGet200Response
     */
    'username'?: string;
    /**
     * The maximum number of guesses allowed for the game.
     * @type {number}
     * @memberof GameGameIdGet200Response
     */
    'maxNumberOfGuesses'?: number;
    /**
     * The length of the word to guess.
     * @type {number}
     * @memberof GameGameIdGet200Response
     */
    'wordLength'?: number;
    /**
     * The current status of the game.
     * @type {string}
     * @memberof GameGameIdGet200Response
     */
    'status'?: GameGameIdGet200ResponseStatusEnum;
    /**
     * The correct word for the game (only present if the game is won or lost).
     * @type {string}
     * @memberof GameGameIdGet200Response
     */
    'correctWord'?: string;
    /**
     * The date and time when the game started.
     * @type {string}
     * @memberof GameGameIdGet200Response
     */
    'startedAt'?: string;
    /**
     * The timestamp when the game ended (only present if the game is won or lost).
     * @type {string}
     * @memberof GameGameIdGet200Response
     */
    'endedAt'?: string;
    /**
     * List of guesses made by the player.
     * @type {Array<GameGameIdGet200ResponseGuessesInner>}
     * @memberof GameGameIdGet200Response
     */
    'guesses'?: Array<GameGameIdGet200ResponseGuessesInner>;
}

export const GameGameIdGet200ResponseStatusEnum = {
    Active: 'active',
    Won: 'won',
    Lost: 'lost'
} as const;

export type GameGameIdGet200ResponseStatusEnum = typeof GameGameIdGet200ResponseStatusEnum[keyof typeof GameGameIdGet200ResponseStatusEnum];

/**
 * 
 * @export
 * @interface GameGameIdGet200ResponseGuessesInner
 */
export interface GameGameIdGet200ResponseGuessesInner {
    /**
     * The unique ID of the guess.
     * @type {string}
     * @memberof GameGameIdGet200ResponseGuessesInner
     */
    'guessId'?: string;
    /**
     * The current attempt number for this guess.
     * @type {number}
     * @memberof GameGameIdGet200ResponseGuessesInner
     */
    'currentTry'?: number;
    /**
     * The maximum number of tries allowed for this game.
     * @type {number}
     * @memberof GameGameIdGet200ResponseGuessesInner
     */
    'maxTries'?: number;
    /**
     * The username of the player making the guess.
     * @type {string}
     * @memberof GameGameIdGet200ResponseGuessesInner
     */
    'username'?: string;
    /**
     * The word guessed by the player.
     * @type {string}
     * @memberof GameGameIdGet200ResponseGuessesInner
     */
    'yourGuess'?: string;
    /**
     * Feedback for the guess, indicating letter correctness. \"-\" for not in word, \"*\" for in word and \"+\" for correct position.
     * @type {string}
     * @memberof GameGameIdGet200ResponseGuessesInner
     */
    'guessResult'?: string;
}
/**
 * 
 * @export
 * @interface GameGameIdGet400Response
 */
export interface GameGameIdGet400Response {
    /**
     * The validation error message.
     * @type {string}
     * @memberof GameGameIdGet400Response
     */
    'error'?: string;
}
/**
 * 
 * @export
 * @interface GameGameIdGet404Response
 */
export interface GameGameIdGet404Response {
    /**
     * The error message indicating the game was not found.
     * @type {string}
     * @memberof GameGameIdGet404Response
     */
    'error'?: string;
}
/**
 * 
 * @export
 * @interface GameGuessPost404Response
 */
export interface GameGuessPost404Response {
    /**
     * Error indicating the game was not found.
     * @type {string}
     * @memberof GameGuessPost404Response
     */
    'error'?: string;
}
/**
 * 
 * @export
 * @interface GameStartPost200Response
 */
export interface GameStartPost200Response {
    /**
     * The unique ID of the game.
     * @type {string}
     * @memberof GameStartPost200Response
     */
    'gameId'?: string;
    /**
     * The username of the player.
     * @type {string}
     * @memberof GameStartPost200Response
     */
    'username'?: string;
    /**
     * The maximum number of guesses allowed for the game.
     * @type {number}
     * @memberof GameStartPost200Response
     */
    'maxNumberOfGuesses'?: number;
    /**
     * The length of the word to guess.
     * @type {number}
     * @memberof GameStartPost200Response
     */
    'wordLength'?: number;
    /**
     * The current status of the game.
     * @type {string}
     * @memberof GameStartPost200Response
     */
    'status'?: GameStartPost200ResponseStatusEnum;
    /**
     * The correct word for the game (only present if the game is won or lost).
     * @type {string}
     * @memberof GameStartPost200Response
     */
    'correctWord'?: string;
    /**
     * The date and time when the game started.
     * @type {string}
     * @memberof GameStartPost200Response
     */
    'startedAt'?: string;
}

export const GameStartPost200ResponseStatusEnum = {
    Active: 'active',
    Won: 'won',
    Lost: 'lost'
} as const;

export type GameStartPost200ResponseStatusEnum = typeof GameStartPost200ResponseStatusEnum[keyof typeof GameStartPost200ResponseStatusEnum];

/**
 * 
 * @export
 * @interface GameStartPost400Response
 */
export interface GameStartPost400Response {
    /**
     * A description of the validation error.
     * @type {string}
     * @memberof GameStartPost400Response
     */
    'error'?: string;
}
/**
 * 
 * @export
 * @interface LeaderboardGet200Response
 */
export interface LeaderboardGet200Response {
    /**
     * 
     * @type {Array<LeaderboardGet200ResponseEntriesInner>}
     * @memberof LeaderboardGet200Response
     */
    'entries'?: Array<LeaderboardGet200ResponseEntriesInner>;
}
/**
 * 
 * @export
 * @interface LeaderboardGet200ResponseEntriesInner
 */
export interface LeaderboardGet200ResponseEntriesInner {
    /**
     * 
     * @type {string}
     * @memberof LeaderboardGet200ResponseEntriesInner
     */
    'username'?: string;
    /**
     * 
     * @type {string}
     * @memberof LeaderboardGet200ResponseEntriesInner
     */
    'startedAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof LeaderboardGet200ResponseEntriesInner
     */
    'endedAt'?: string;
    /**
     * 
     * @type {number}
     * @memberof LeaderboardGet200ResponseEntriesInner
     */
    'maxNumberOfGuesses'?: number;
    /**
     * 
     * @type {string}
     * @memberof LeaderboardGet200ResponseEntriesInner
     */
    'word'?: string;
    /**
     * 
     * @type {number}
     * @memberof LeaderboardGet200ResponseEntriesInner
     */
    'durationSeconds'?: number;
}

/**
 * GameApi - axios parameter creator
 * @export
 */
export const GameApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Fetch the details of a specific game using its unique gameId.
         * @summary Retrieve game details
         * @param {string} gameId The unique identifier of the game. Must be a valid UUID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        gameGameIdGet: async (gameId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'gameId' is not null or undefined
            assertParamExists('gameGameIdGet', 'gameId', gameId)
            const localVarPath = `/game/{gameId}`
                .replace(`{${"gameId"}}`, encodeURIComponent(String(gameId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Make a guess for the word in a specific game. The gameId and the wordGuess must be provided.
         * @summary Submit a word guess for a game
         * @param {string} gameId The unique identifier of the game. Must be a valid UUID.
         * @param {string} wordGuess The word being guessed. Must be a non-empty string.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        gameGuessPost: async (gameId: string, wordGuess: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'gameId' is not null or undefined
            assertParamExists('gameGuessPost', 'gameId', gameId)
            // verify required parameter 'wordGuess' is not null or undefined
            assertParamExists('gameGuessPost', 'wordGuess', wordGuess)
            const localVarPath = `/game/guess`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (gameId !== undefined) {
                localVarQueryParameter['gameId'] = gameId;
            }

            if (wordGuess !== undefined) {
                localVarQueryParameter['wordGuess'] = wordGuess;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Start a new game with the given username, maximum number of guesses, and word length.
         * @summary Start a new game
         * @param {string} username The username of the player. Must be 4-20 characters long and only contain lowercase letters.
         * @param {number} [maxNumberOfGuesses] The maximum number of guesses allowed. Must be between 1 and 10. Defaults to 6.
         * @param {number} [wordLength] The length of the word to guess. Must be greater than 3. Defaults to 5.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        gameStartPost: async (username: string, maxNumberOfGuesses?: number, wordLength?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'username' is not null or undefined
            assertParamExists('gameStartPost', 'username', username)
            const localVarPath = `/game/start`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (username !== undefined) {
                localVarQueryParameter['username'] = username;
            }

            if (maxNumberOfGuesses !== undefined) {
                localVarQueryParameter['maxNumberOfGuesses'] = maxNumberOfGuesses;
            }

            if (wordLength !== undefined) {
                localVarQueryParameter['wordLength'] = wordLength;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * GameApi - functional programming interface
 * @export
 */
export const GameApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = GameApiAxiosParamCreator(configuration)
    return {
        /**
         * Fetch the details of a specific game using its unique gameId.
         * @summary Retrieve game details
         * @param {string} gameId The unique identifier of the game. Must be a valid UUID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async gameGameIdGet(gameId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GameGameIdGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.gameGameIdGet(gameId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['GameApi.gameGameIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Make a guess for the word in a specific game. The gameId and the wordGuess must be provided.
         * @summary Submit a word guess for a game
         * @param {string} gameId The unique identifier of the game. Must be a valid UUID.
         * @param {string} wordGuess The word being guessed. Must be a non-empty string.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async gameGuessPost(gameId: string, wordGuess: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GameGameIdGet200ResponseGuessesInner>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.gameGuessPost(gameId, wordGuess, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['GameApi.gameGuessPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Start a new game with the given username, maximum number of guesses, and word length.
         * @summary Start a new game
         * @param {string} username The username of the player. Must be 4-20 characters long and only contain lowercase letters.
         * @param {number} [maxNumberOfGuesses] The maximum number of guesses allowed. Must be between 1 and 10. Defaults to 6.
         * @param {number} [wordLength] The length of the word to guess. Must be greater than 3. Defaults to 5.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async gameStartPost(username: string, maxNumberOfGuesses?: number, wordLength?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GameStartPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.gameStartPost(username, maxNumberOfGuesses, wordLength, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['GameApi.gameStartPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * GameApi - factory interface
 * @export
 */
export const GameApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = GameApiFp(configuration)
    return {
        /**
         * Fetch the details of a specific game using its unique gameId.
         * @summary Retrieve game details
         * @param {string} gameId The unique identifier of the game. Must be a valid UUID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        gameGameIdGet(gameId: string, options?: RawAxiosRequestConfig): AxiosPromise<GameGameIdGet200Response> {
            return localVarFp.gameGameIdGet(gameId, options).then((request) => request(axios, basePath));
        },
        /**
         * Make a guess for the word in a specific game. The gameId and the wordGuess must be provided.
         * @summary Submit a word guess for a game
         * @param {string} gameId The unique identifier of the game. Must be a valid UUID.
         * @param {string} wordGuess The word being guessed. Must be a non-empty string.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        gameGuessPost(gameId: string, wordGuess: string, options?: RawAxiosRequestConfig): AxiosPromise<GameGameIdGet200ResponseGuessesInner> {
            return localVarFp.gameGuessPost(gameId, wordGuess, options).then((request) => request(axios, basePath));
        },
        /**
         * Start a new game with the given username, maximum number of guesses, and word length.
         * @summary Start a new game
         * @param {string} username The username of the player. Must be 4-20 characters long and only contain lowercase letters.
         * @param {number} [maxNumberOfGuesses] The maximum number of guesses allowed. Must be between 1 and 10. Defaults to 6.
         * @param {number} [wordLength] The length of the word to guess. Must be greater than 3. Defaults to 5.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        gameStartPost(username: string, maxNumberOfGuesses?: number, wordLength?: number, options?: RawAxiosRequestConfig): AxiosPromise<GameStartPost200Response> {
            return localVarFp.gameStartPost(username, maxNumberOfGuesses, wordLength, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * GameApi - object-oriented interface
 * @export
 * @class GameApi
 * @extends {BaseAPI}
 */
export class GameApi extends BaseAPI {
    /**
     * Fetch the details of a specific game using its unique gameId.
     * @summary Retrieve game details
     * @param {string} gameId The unique identifier of the game. Must be a valid UUID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GameApi
     */
    public gameGameIdGet(gameId: string, options?: RawAxiosRequestConfig) {
        return GameApiFp(this.configuration).gameGameIdGet(gameId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Make a guess for the word in a specific game. The gameId and the wordGuess must be provided.
     * @summary Submit a word guess for a game
     * @param {string} gameId The unique identifier of the game. Must be a valid UUID.
     * @param {string} wordGuess The word being guessed. Must be a non-empty string.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GameApi
     */
    public gameGuessPost(gameId: string, wordGuess: string, options?: RawAxiosRequestConfig) {
        return GameApiFp(this.configuration).gameGuessPost(gameId, wordGuess, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Start a new game with the given username, maximum number of guesses, and word length.
     * @summary Start a new game
     * @param {string} username The username of the player. Must be 4-20 characters long and only contain lowercase letters.
     * @param {number} [maxNumberOfGuesses] The maximum number of guesses allowed. Must be between 1 and 10. Defaults to 6.
     * @param {number} [wordLength] The length of the word to guess. Must be greater than 3. Defaults to 5.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GameApi
     */
    public gameStartPost(username: string, maxNumberOfGuesses?: number, wordLength?: number, options?: RawAxiosRequestConfig) {
        return GameApiFp(this.configuration).gameStartPost(username, maxNumberOfGuesses, wordLength, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * LeaderboardApi - axios parameter creator
 * @export
 */
export const LeaderboardApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns the top 10 players who won the game in the shortest time.
         * @summary Get top 10 leaderboard entries
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        leaderboardGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/leaderboard`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * LeaderboardApi - functional programming interface
 * @export
 */
export const LeaderboardApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = LeaderboardApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns the top 10 players who won the game in the shortest time.
         * @summary Get top 10 leaderboard entries
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async leaderboardGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LeaderboardGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.leaderboardGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['LeaderboardApi.leaderboardGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * LeaderboardApi - factory interface
 * @export
 */
export const LeaderboardApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = LeaderboardApiFp(configuration)
    return {
        /**
         * Returns the top 10 players who won the game in the shortest time.
         * @summary Get top 10 leaderboard entries
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        leaderboardGet(options?: RawAxiosRequestConfig): AxiosPromise<LeaderboardGet200Response> {
            return localVarFp.leaderboardGet(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * LeaderboardApi - object-oriented interface
 * @export
 * @class LeaderboardApi
 * @extends {BaseAPI}
 */
export class LeaderboardApi extends BaseAPI {
    /**
     * Returns the top 10 players who won the game in the shortest time.
     * @summary Get top 10 leaderboard entries
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LeaderboardApi
     */
    public leaderboardGet(options?: RawAxiosRequestConfig) {
        return LeaderboardApiFp(this.configuration).leaderboardGet(options).then((request) => request(this.axios, this.basePath));
    }
}



